import pygame
import sys
import heapq

# Initialize pygame
pygame.init()

# Screen dimensions
WIDTH, HEIGHT = 600, 400
TILE_SIZE = 40
GRID_WIDTH = WIDTH // TILE_SIZE
GRID_HEIGHT = HEIGHT // TILE_SIZE
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Pacman with Pathfinding Ghosts")

# Colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)

# Clock for controlling frame rate
clock = pygame.time.Clock()

# Load images
pacman_image = pygame.image.load("pacman.png").convert_alpha()
ghost_image = pygame.image.load("ghost.png").convert_alpha()
pacman_image = pygame.transform.scale(pacman_image, (32, 32))
ghost_image = pygame.transform.scale(ghost_image, (32, 32))

# Font for score display
font = pygame.font.Font(None, 36)

# Maze walls (40x40 blocks)
walls = [
    pygame.Rect(40, 40, 520, 40),  # Top wall
    pygame.Rect(40, 40, 40, 320),  # Left wall
    pygame.Rect(40, 360, 520, 40),  # Bottom wall
    pygame.Rect(560, 40, 40, 320),  # Right wall
    pygame.Rect(160, 120, 240, 40),  # Horizontal wall center
    pygame.Rect(160, 200, 40, 120),  # Vertical wall left
    pygame.Rect(360, 200, 40, 120),  # Vertical wall right
]

# Generate grid representation of the maze
grid = [[0 for _ in range(GRID_WIDTH)] for _ in range(GRID_HEIGHT)]
for wall in walls:
    for x in range(wall.left // TILE_SIZE, wall.right // TILE_SIZE):
        for y in range(wall.top // TILE_SIZE, wall.bottom // TILE_SIZE):
            grid[y][x] = 1  # Mark wall tiles as blocked

# Pellets
pellets = [
    pygame.Rect(x * TILE_SIZE + 15, y * TILE_SIZE + 15, 10, 10)
    for x in range(GRID_WIDTH) for y in range(GRID_HEIGHT)
    if grid[y][x] == 0
]

# Pacman properties
pacman_rect = pygame.Rect(85, 85, 32, 32)
pacman_speed = 5
pacman_dx, pacman_dy = 0, 0

# Ghosts (spawn in a predefined safe area)
ghosts = [
    {"rect": pygame.Rect(300, 150, 32, 32), "path": []},
    {"rect": pygame.Rect(300, 180, 32, 32), "path": []},
    {"rect": pygame.Rect(270, 150, 32, 32), "path": []},
    {"rect": pygame.Rect(270, 180, 32, 32), "path": []},
]
ghost_speed = 2
pathfinding_timer = 0

# A* Pathfinding function
def heuristic(a, b):
    """Heuristic function for A* (Manhattan distance)."""
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def astar(start, goal):
    """A* algorithm to find the shortest path on the grid."""
    open_set = []
    heapq.heappush(open_set, (0, start))
    came_from = {}
    g_score = {start: 0}
    f_score = {start: heuristic(start, goal)}

    while open_set:
        _, current = heapq.heappop(open_set)

        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            return path[::-1]  # Return reversed path

        x, y = current
        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            neighbor = (x + dx, y + dy)
            if 0 <= neighbor[0] < GRID_WIDTH and 0 <= neighbor[1] < GRID_HEIGHT and grid[neighbor[1]][neighbor[0]] == 0:
                tentative_g_score = g_score[current] + 1
                if neighbor not in g_score or tentative_g_score < g_score[neighbor]:
                    came_from[neighbor] = current
                    g_score[neighbor] = tentative_g_score
                    f_score[neighbor] = tentative_g_score + heuristic(neighbor, goal)
                    if neighbor not in [i[1] for i in open_set]:
                        heapq.heappush(open_set, (f_score[neighbor], neighbor))

    return []  # No path found

def grid_pos(rect):
    """Convert pixel position to grid position."""
    return rect.centerx // TILE_SIZE, rect.centery // TILE_SIZE

def pixel_pos(grid_pos):
    """Convert grid position to pixel position."""
    return grid_pos[0] * TILE_SIZE + TILE_SIZE // 2, grid_pos[1] * TILE_SIZE + TILE_SIZE // 2

def move_toward(rect, target, speed):
    """Move a rectangle toward a target position."""
    if rect.centerx < target[0]:
        rect.x += speed
    elif rect.centerx > target[0]:
        rect.x -= speed
    if rect.centery < target[1]:
        rect.y += speed
    elif rect.centery > target[1]:
        rect.y -= speed

# Draw functions
def draw_walls():
    """Draw maze walls."""
    for wall in walls:
        pygame.draw.rect(screen, BLUE, wall)

# Main game loop
running = True
score = 0

while running:
    screen.fill(BLACK)

    # Event handling
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_UP:
                pacman_dx, pacman_dy = 0, -pacman_speed
            elif event.key == pygame.K_DOWN:
                pacman_dx, pacman_dy = 0, pacman_speed
            elif event.key == pygame.K_LEFT:
                pacman_dx, pacman_dy = -pacman_speed, 0
            elif event.key == pygame.K_RIGHT:
                pacman_dx, pacman_dy = pacman_speed, 0
        elif event.type == pygame.KEYUP:
            pacman_dx, pacman_dy = 0, 0

    # Move Pacman
    pacman_rect.x += pacman_dx
    pacman_rect.y += pacman_dy
    for wall in walls:
        if pacman_rect.colliderect(wall):
            pacman_rect.x -= pacman_dx
            pacman_rect.y -= pacman_dy
            break

    # Check pellet collision
    for pellet in pellets[:]:
        if pacman_rect.colliderect(pellet):
            pellets.remove(pellet)
            score += 10

    # Pathfinding for ghosts
    pathfinding_timer += 1
    if pathfinding_timer % 1 == 0:  # Recalculate paths every 30 frames
        pacman_grid = grid_pos(pacman_rect)
        for ghost in ghosts:
            ghost_grid = grid_pos(ghost["rect"])
            ghost["path"] = astar(ghost_grid, pacman_grid)

    # Move ghosts
    for ghost in ghosts:
        if ghost["path"]:
            next_pos = pixel_pos(ghost["path"].pop(0))
            move_toward(ghost["rect"], next_pos, ghost_speed)

    # Draw game objects
    draw_walls()
    for pellet in pellets:
        pygame.draw.ellipse(screen, WHITE, pellet)
    screen.blit(pacman_image, pacman_rect)
    for ghost in ghosts:
        screen.blit(ghost_image, ghost["rect"])

    # Draw score
    score_text = font.render(f"Score: {score}", True, YELLOW)
    screen.blit(score_text, (10, 10))

    # Update display
    pygame.display.flip()
    clock.tick(30)

pygame.quit()
sys.exit()
